{"version":3,"sources":["User.tsx","helpers/api.ts","store/index.ts","Comment.tsx","CommentList.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["User","user","className","name","address","city","street","suite","href","email","getPreparedPosts","a","Promise","all","fetch","then","response","json","postFromServer","usersFromServer","commentsFromServer","map","post","find","id","userId","comments","filter","comment","postId","getIsLoading","state","isLoading","getQuery","query","getError","errorMessage","getVisiblePosts","posts","title","body","toLowerCase","includes","trim","initialState","store","createStore","action","type","commentId","composeWithDevTools","applyMiddleware","thunk","Comment","dispatch","useDispatch","onClick","CommentList","key","Post","PostList","App","visiblePosts","useSelector","useState","inputQuery","setInputQuery","queryWithDebounce","useCallback","debounce","value","setQuery","length","placeholder","onChange","event","target","postsFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f96eb30.chunk.js","sourcesContent":["import React from 'react';\nimport './User.scss';\n\ntype UserProps ={\n  user: User;\n};\n\nconst User: React.FC<UserProps> = ({ user }) => (\n  <section className=\"user \">\n    <p className=\"user__name\">\n      {user.name}\n    </p>\n    <div className=\"user__address\">\n      <p className=\"user__city\">\n        {user.address.city}\n        ,\n      </p>\n      <p className=\"user__street\">\n        {user.address.street}\n        ,\n      </p>\n      <p className=\"user__suite\">\n        {user.address.suite}\n        ,\n      </p>\n      <a href={`mailto:${user.email}`} className=\"comment__email\">\n        {user.email}\n      </a>\n    </div>\n  </section>\n);\n\nexport default User;\n","// export function fetchMessage(): Promise<string> {\n//   // this is just a fake promise resolved in 2 seconds\n//   return new Promise(resolve => {\n//     setTimeout(() => {\n//       resolve('Message from server');\n//     }, 2000);\n//   });\n// }\n\nconst API_USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst API_POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst API_COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\n\nexport const getUsers = () => {\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n};\n\nexport const getPosts = () => {\n  return fetch(API_POSTS_URL)\n    .then(response => response.json());\n};\n\nexport const getComments = () => {\n  return fetch(API_COMMENTS_URL)\n    .then(response => response.json());\n};\n\nexport const getPreparedPosts = async () => {\n  const [postFromServer, usersFromServer, commentsFromServer] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments(),\n  ]);\n\n  return postFromServer.map((post: Post) => ({\n    ...post,\n    user: usersFromServer.find((user: User) => user.id === post.userId),\n    comments: commentsFromServer.filter((comment: Comment) => comment.postId === post.id),\n  }));\n};\n","import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Dispatch } from 'react';\nimport thunk from 'redux-thunk';\nimport { getPreparedPosts } from '../helpers/api';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_POSTS = 'SET_POSTS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst SET_QUERY = 'SET_QUERY';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const handleError = (errorMessage: string) => ({\n  type: HANDLE_ERROR,\n  errorMessage,\n});\nexport const deletePost = (postId: number) => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const deleteComment = (commentId: number) => ({\n  type: DELETE_COMMENT,\n  commentId,\n});\n\nexport const setQuery = (query: string) => (\n  {\n    type: SET_QUERY,\n    query,\n  }\n);\n\nexport const getIsLoading = (state: RootState) => state.isLoading;\nexport const getQuery = (state: RootState) => state.query;\nexport const getError = (state: RootState) => state.errorMessage;\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter((post: Post) => (\n      (post.title + post.body)\n        .toLowerCase().includes(state.query.trim().toLowerCase())\n    ));\n};\n\nexport type RootState = {\n  posts: Post[];\n  query: string;\n  isLoading: boolean;\n  errorMessage: string;\n};\n\nconst initialState: RootState = {\n  posts: [],\n  query: '',\n  isLoading: false,\n  errorMessage: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: '',\n      };\n\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: [...action.posts],\n      };\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        isLoading: false,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts].filter(post => post.id !== action.postId),\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: [...state.posts].map(post => ({\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.commentId),\n        })),\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query,\n      };\n\n\n    default: return state;\n  }\n};\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n    try {\n      const postsFromServer = await getPreparedPosts();\n\n      dispatch(setPosts(postsFromServer));\n    } catch (error) {\n      dispatch(handleError('Error '));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport './Comment.scss';\nimport { deleteComment } from './store/index';\n\nconst Comment: React.FC<Comment> = ({\n  name, body, id, email,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comment\">\n      <button\n        type=\"button\"\n        className=\"button__delete\"\n        onClick={() => dispatch(deleteComment(id))}\n      >\n        Delete\n      </button>\n      <p className=\"comment__name\">\n        {name}\n      </p>\n      <p className=\"comment__text\">\n        {body}\n      </p>\n      <p className=\"comment__email\">\n        <a href={`mailto:${email}`}>\n          {email}\n        </a>\n      </p>\n    </div>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype CommentListProps = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<CommentListProps> = ({ comments }) => (\n  <div className=\"comments\">\n    <h3>Comments</h3>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport User from './User';\nimport CommentList from './CommentList';\nimport './Post.scss';\nimport { deletePost } from './store/index';\n\nconst Post: React.FC<Post> = ({\n  title, body, id, user, comments,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n\n    <div className=\"post\">\n      <button\n        type=\"button\"\n        className=\"button__delete\"\n        onClick={() => dispatch(deletePost(id))}\n      >\n        Delete Post\n      </button>\n      <h2 className=\"post__title\">\n        {title}\n      </h2>\n\n      <User user={user} />\n      <p className=\"post__body\">\n        {body}\n      </p>\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype PostListProps = {\n  posts: Post[];\n};\n\nconst PostList: React.FC<PostListProps> = ({ posts }) => (\n  <>\n    <div className=\"post__list\">\n      {posts.map(post => (\n        <Post {...post} key={post.id} />\n      ))}\n    </div>\n  </>\n);\n\nexport default PostList;\n","import React, { useCallback, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport debounce from 'lodash.debounce';\nimport PostList from './PostList';\nimport {\n  getVisiblePosts,\n  getIsLoading,\n  getError,\n  setQuery,\n  loadPosts,\n  getQuery,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const visiblePosts = useSelector(getVisiblePosts);\n  const isLoading = useSelector(getIsLoading);\n  const errorMessage = useSelector(getError);\n  const query = useSelector(getQuery);\n  const [inputQuery, setInputQuery] = useState(query);\n\n  const queryWithDebounce = useCallback(\n    debounce((value: string) => dispatch(setQuery(value)), 500), [],\n  );\n\n  const searchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setInputQuery(value);\n    queryWithDebounce(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!visiblePosts.length ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => dispatch(loadPosts())}\n          >\n            {isLoading ? 'Loading...' : 'Click to Load'}\n          </button>\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n        </>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"what you search\"\n            value={inputQuery}\n            onChange={searchQuery}\n          />\n          <PostList posts={visiblePosts} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}